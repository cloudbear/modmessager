<!DOCTYPE HTML>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="jquery-3.5.1.min.js"></script>
    <script src="tmi.min.js"></script>
    <link rel="stylesheet"
          href="https://fonts.googleapis.com/css?family=Open Sans Condensed:700">

	<style>
		#message {
		    display: inline-block;
			font-family: 'Open Sans Condensed';
			font-weight: 700;
			color: white;
			font-size: 60px;
			margin: 0;
			
			margin-left: 15px;
			white-space: nowrap;

		}

		#modmessagebox {
			position: absolute;
			bottom: 0;
            left: 0;
			width: 0px;
			height: 82px;
			overflow: hidden;
			background-color: #00AA00;
			
		}
		
		#testbutton {
			position: absolute;
			top: 0;
			width: fit-content;
			padding: 5px 25px;
			/* background-color: #00AA00; */
			
		}
		
	</style>

</head>

<body>
	<div id="modmessagebox">
	    <h1 id="message"></h1>		
	</div>

</body>
<script type="text/javascript">

    // Define configuration options
    const opts = {
        channels: [
          "limmy"
        ]
    };

    // Create a client with our options
    let client = new tmi.client(opts);

    // Register our event handlers (defined below)
    client.on('message', onMessageHandler);
    client.on('connected', onConnectedHandler);

    // Connect to Twitch:
    client.connect();
    
    // Called every time a message comes in
    function testMessage(msg) {
			$("#modmessagebox").show();
			$("#message").text(msg);
        
			doAnimation();
    }

    // Animate text
    function doAnimation() {
        var textWidth = $("#message").width();
        $("#message").css({"opacity":0, "margin-left":"50px"}); 
        $("#modmessagebox").width(1);
        $("#modmessagebox").animate({width:textWidth+30}, 500);
        $("#message").animate({"opacity":1, "margin-left":"15px"}, 700);
//        $("#message").animate({width:textWidth+30});
    }
    
    // Animate off
    function deleteAnimation() {
        $("#modmessagebox").animate({width:0}, 500);
        $("#message").animate({"opacity":0, "margin-left":"50px"}, 700);
    }

    function processTimer(message) {
        const timerRegExp = /{(\d+) (HOURS?|MINUTES?|SECONDS?)}/;
        const timerText = message.replace(timerRegExp, '%timer%');
        const components = message.match(timerRegExp);
        console.log(components);
        if (!components) {
            return false;
        }
        const quantity = components[1];
        const unit = components[2];
        
        let milliseconds;
        switch (unit) {
            case 'HOURS':
            case 'HOUR':
                milliseconds = parseInt(quantity) * 60 * 60 * 1000;
                break;
            case 'MINUTES':
            case 'MINUTE':
                milliseconds = parseInt(quantity) * 60 * 1000;
                break;
            case 'SECONDS':
            case 'SECOND':
                milliseconds = parseInt(quantity) * 1000;
                break;
        }

        return [milliseconds, timerText];
    }
    
    // Global scope required here
    let taggedText;
    let zero;
    let tickIntervalID;

    function initialiseTimer(milliseconds) {
        zero = Date.now() + milliseconds;
    }

    function tick() {
        let diff = zero - Date.now();
        if (diff < 0) {
            diff = 0;
            clearInterval(tickIntervalID);
        }
        const diffDate = new Date(diff);
        const hours = diffDate.getUTCHours().toString();
        const minutes = diffDate.getUTCMinutes().toString();
        const paddedMinutes = (minutes.length == 1) ? `0${minutes}` : minutes;
        const seconds = diffDate.getUTCSeconds().toString();
        const paddedSeconds = (seconds.length == 1) ? `0${seconds}` : seconds;
        
        if (hours != "0") timeText = `${hours}:${paddedMinutes}:${paddedSeconds}`;
        else timeText = `${paddedMinutes}:${paddedSeconds}`;

        let tag = /%timer%/;
        let timerMessage = taggedText.replace(tag, timeText);
        
        $('#message').text(timerMessage);
    }

    function testTimer(messagefromtwitch) {
        if (messagefromtwitch.startsWith("!alert ")) {
            const timer = processTimer(messagefromtwitch.substr(7).toUpperCase());
            if (timer) {
                milliseconds = timer[0];
                taggedText = timer[1];
                initialiseTimer(milliseconds);
                
                $("#modmessagebox").show();
                tick();
                tickIntervalID = setInterval('tick()', 500);
                doAnimation();
            } else {
                if (typeof tickIntervalID !== 'undefined') {
                    clearInterval(tickIntervalID);
                }
                $("#modmessagebox").show();
                $("#message").text(messagefromtwitch.substr(7).toUpperCase());
                doAnimation();
            }
        } else if (messagefromtwitch.startsWith("!delete")) {
            if (typeof tickIntervalID !== 'undefined') {
                clearInterval(tickIntervalID);
            }
            deleteAnimation();
        }
    }
    
    // Called every time a message comes in
    function onMessageHandler(target, context, msg, self) {
        // Remove whitespace from chat message
        const commandName = msg.trim();
        
        // If the command is known, let's execute it

        if (context.mod || (context["badges-raw"] != null && context["badges-raw"].startsWith("broadcaster"))) {
            if (commandName.startsWith("!alert ")) {
                const timer = processTimer(commandName.substr(7).toUpperCase());
                if (timer) {
                    milliseconds = timer[0];
                    taggedText = timer[1];
                    initialiseTimer(milliseconds);
                    
                    $("#modmessagebox").show();
                    tick();
                    tickIntervalID = setInterval('tick()', 500);
                    doAnimation();
                } else {
                    if (typeof tickIntervalID !== 'undefined') {
                        clearInterval(tickIntervalID);
                    }
                    $("#modmessagebox").show();
                    $("#message").text(commandName.substr(7).toUpperCase());
                    doAnimation();
                }
            } else if (commandName.startsWith("!delete")) {
                if (typeof tickIntervalID !== 'undefined') {
                    clearInterval(tickIntervalID);
                }
                deleteAnimation();
            }
        }

    }

    function onConnectedHandler(addr, port) {
        console.log(`* Connected to ${addr}:${port}`);
    }
</script>
</html>